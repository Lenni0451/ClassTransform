allprojects {
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "signing"

    java.toolchain.languageVersion = JavaLanguageVersion.of(8)
    compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

    group = project.maven_group
    archivesBaseName = project.maven_name
    version = project.maven_version
    if (!project.maven_group) group = rootProject.maven_group
    if (!project.maven_name) archivesBaseName = rootProject.maven_name
    if (!project.maven_version) version = rootProject.maven_version

    repositories {
        mavenCentral()
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    publishing {
        repositories {
            maven {
                name = "reposilite"
                def releasesUrl = "https://maven.lenni0451.net/releases"
                def snapshotsUrl = "https://maven.lenni0451.net/snapshots"
                url = project.maven_version.endsWith("SNAPSHOT") ? snapshotsUrl : releasesUrl

                credentials(PasswordCredentials)
                authentication {
                    basic(BasicAuthentication)
                }
            }
            maven {
                name = "ossrh"
                def releasesUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = project.maven_version.endsWith("SNAPSHOT") ? snapshotsUrl : releasesUrl

                credentials(PasswordCredentials)
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
        publications {
            maven(MavenPublication) {
                artifactId = project.maven_name
                groupId = project.maven_group
                version = project.maven_version

                from components.java

                pom {
                    name = rootProject.name
                    description = "A lightweight, mixin like injection lib using ASM"
                    url = "https://github.com/Lenni0451/ClassTransform"
                    licenses {
                        license {
                            name = "MIT License"
                            url = "https://github.com/Lenni0451/ClassTransform/blob/main/LICENSE"
                        }
                    }
                    developers {
                        developer {
                            id = "Lenni0451"
                        }
                    }
                    scm {
                        connection = "scm:git:git://github.com/Lenni0451/ClassTransform.git"
                        developerConnection = "scm:git:ssh://github.com/Lenni0451/ClassTransform.git"
                        url = "github.com/Lenni0451/ClassTransform"
                    }
                }
            }
        }
    }

    signing {
        sign configurations.archives
        sign publishing.publications.maven
    }

    project.tasks.withType(PublishToMavenRepository).forEach {
        it.dependsOn(project.tasks.withType(Sign))
    }
}

dependencies {
    api "org.ow2.asm:asm:9.5"
    api "org.ow2.asm:asm-commons:9.5"
    api "org.ow2.asm:asm-tree:9.5"
    api "org.ow2.asm:asm-analysis:9.5"

    testImplementation platform("org.junit:junit-bom:5.9.3")
    testImplementation "org.junit.jupiter:junit-jupiter"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    maxParallelForks Runtime.runtime.availableProcessors()
}

build.dependsOn(test)
